一、创建“服务注册中心”

1.服务注册与发现

这里我们会用到Spring Cloud Netflix，该项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路有（Zuul），客户端负载均衡（Ribbon）等。

所以，我们这里的核心内容就是服务发现模块：Eureka。下面我们动手来做一些尝试。

1.1 创建springboot项目

1.2 修改pom文件，添加spring cloud 依赖如下

<dependencies>  
    <!-- springCloud 配置 -->  
    <dependency>  
        <groupId>org.springframework.cloud</groupId>  
        <artifactId>spring-cloud-starter-config</artifactId>  
    </dependency>   
  
    <!-- springCloud注测中心服务 -->  
    <dependency>  
        <groupId>org.springframework.cloud</groupId>  
        <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>  
    </dependency>  
  
    <dependency>  
        <groupId>org.springframework.boot</groupId>  
        <artifactId>spring-boot-starter-test</artifactId>  
        <scope>test</scope>  
    </dependency>  
</dependencies>  

1.3 在启动类上加上注解 如下

通过@EnableEurekaServer注解启动一个服务注册中心提供给其他应用进行对话。这一步非常的简单，只需要在一个普通的Spring Boot应用中添加这个注解就能开启此功能。

1.4 配置文件application.properties

在默认设置下，该服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为，只需要在application.properties中问增加如下配置：

#注册中心服务ID  
spring.application.name=mycloud-server
  
#端口号  
server.port=8500
eureka.instance.hostname=localhost

# eureka.client.registerWithEureka ：表示是否将自己注册到Eureka Server，默认为true。  
# 由于当前这个应用就是Eureka Server，故而设为false    
eureka.client.register-with-eureka=false

# eureka.client.fetchRegistry ：表示是否从Eureka Server获取注册信息，默认为true。因为这是一个单点的Eureka Server，  
# 不需要同步其他的Eureka Server节点的数据，故而设为false。    
eureka.client.fetch-registry=false

# eureka.client.serviceUrl.defaultZone ：设置与Eureka Server交互的地址，查询服务和注册服务都需要依赖这个地址。默认是  
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:${server.port}/eureka/

1.5 启动服务，访问：http://localhost:8500/。

2.创建服务端

2.1 创建springboot项目同上

2.2 修改pom.xml文件，添加spring cloud 依赖如下

<dependencies>  
    <dependency>  
	<groupId>org.springframework.boot</groupId>  
	<artifactId>spring-boot-starter</artifactId>  
    </dependency>  
    <dependency>  
	<groupId>org.springframework.cloud</groupId>  
	<artifactId>spring-cloud-starter-config</artifactId>  
    </dependency>  
    <dependency>  
	<groupId>org.springframework.cloud</groupId>  
	<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>  
    </dependency>  
    <dependency>  
	<groupId>org.springframework.boot</groupId>  
	<artifactId>spring-boot-starter-test</artifactId>  
	<scope>test</scope>  
    </dependency>  
    <dependency>      
	<groupId>org.springframework.boot</groupId>      
	<artifactId>spring-boot-starter-web</artifactId>      
    </dependency>    
</dependencies>

2.3 在启动类上加上注解 如下

最后在主类中通过加上@EnableEurekaClient 注解，该注解能激活Eureka中的对注册中心注册服务实现，才能实现Controller中对服务信息的输出

2.4 配置文件application.properties

#服务名称    
spring.application.name=mycloud-service1    
#端口号    
server.port=8501 
#在注册中心中进行注册  
eureka.client.serviceUrl.defaultZone=http://localhost:8500/eureka/   
#启动服务发现的功能，开启了才能调用其它服务   
spring.cloud.config.discovery.enabled=true  
#发现的服务的名字--对应注测中心的服务名字  
spring.cloud.config.discovery.serviceId=mycloud-server

通过spring.application.name属性，我们可以指定微服务的名称后续在调用的时候只需要使用该名称就可以进行服务的访问。

eureka.client.serviceUrl.defaultZone属性对应服务注册中心的配置内容，指定服务注册中心的位置。

为了在本机上测试区分服务提供方和服务注册中心，使用server.port属性设置不同的端口。

2.5 启动该项目,再次访问：http://localhost:8500/。